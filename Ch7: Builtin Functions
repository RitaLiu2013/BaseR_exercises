## ch 7 built-in functions

## 7.1
sin(exp(4)+sqrt(acos(1/3)))
# e^4 in math <=> exp(4) in R
# arccos(1/3) in math <=> acos(1/3) in R

## 7.2
x <- c(pi, 4/3, 7)
round(x,2)
# round each element in vector x with 2 digits.

## 7.3
x <- 1:10
x_in_square <-  x^2
x_in_square # square in element-wise.
diff(x_in_square) # difference between element n and n-1, so here are in total 9 elements
range(x_in_square) # 100, since the highest and lowest value are 100 and 1.
diff(range(x_in_square))

## 7.4
x_vector <- 1:4
y_vector <- 4:1
pmax(x_vector,y_vector) # pmax is the max. of elements in both factors
# 1,2,3,4
# 4,3,2,1
# so pmax( , )= 4,3,3,4

## 7.5
a <- 1:4
cumsum(a)
# a = (1,2,3,4)
# cumsum(a) is 1, 1+2=3, 1+2+3=6, 1+2+3+4=10


## 7.6
x <- c(1,1,1,-1,-1,-1,NA)
y <- c(0,1,4,0,-1,NA,1)
x
y
result <- x/sqrt(y)
result

# -1/sqrt(-1) gives NaN

## 7.7
x <- seq(1,7,by=3)
sum(x^2)/length(x)


## 7.8
sqrt(max(9:-3))


## 7.11
# How to use R to write sum over i of a function of i.
i <- 1:15
sum_result <- sum(2^i/factorial(i) - cos(3*i)/i^4) 
sum_result

## 7.12
x <- 4:12
product_result <- prod(x*(x-1)*(x-2)/factorial(x-3) + atan(x)/x^2)
product_result

product_result <- prod(abs(x*(x-1)*(x-2)/factorial(x-3) + atan(x)/x^2))
product_result

## 7.13
# interesting telescoping product-sum 
sum(cumprod(seq(3,49,by=2)/seq(4,50,by=2)))

## 7.14
exp(exp(1))


## 7.15
sum(seq(1:100)^3)
# 1^3+2^3+...+ 100^3

## 7.16
vector <- 5^seq(1:10)/factorial(seq(1:10))


## 7.17

## double sum
sum(outer(3:8, 2:9, function(i, j) i^2 / (7 + 4*j)))

## FUN is a function you apply pairwise between every element of X and every element of Y
## The result is a matrix (or higher-dimensional array if needed).


## 7.20
mty=365.24219
rounding_result <- round(mty,1) # round to nearest 10^(-1)
rounding_result # 365.2

rounding_result1 <- round(mty,-1)# round to nearest 10^1
rounding_result1 #370

rounding_result2 <- round(mty,-2)# round to nearest 10^2
rounding_result1 # 400


## 7.21
# Use dim() function to transform the vector x=1:10 into
x_Vector <- 1:10
dim(x_Vector)
dim(x_Vector) = c(1,10) # a 1*10 matrix
x_Vector

dim(x_Vector) = c(10,1) # a 10*1 matrix
x_Vector

dim(x_Vector) = c(5,2) # a 5*2 matrix
x_Vector

count(x_Vector)
str(x_Vector)


## 7.22
# compose two R functions that count the number of distinct elements in a vector name
vector <- 1:10
length(unique(vector))


## 7.23
x <- -8
x^(1/3) # will return NaN


## 7.24

x=1:8
length(x)=5
x
length(x)=10
x
# if the length of x is set to be longer than the original vector length, 
# R will add NA's at the end of the vector


## 7.25
# Besides <- and =, Assign a vector, matrix or array to an object.

assign_function <- assign("x",3)
assign_function

assign1 <- assign("y",1:10)
assign1

## 7.26
matrix_A <- array(1:24, c(2,3,4))
matrix_A
matrix_A[1, ,]
apply(matrix_A[1, ,], 1, sort)

# apply() outputs each result as a column of the new matrix, not as a row.

t(apply(matrix_A[1, ,], 1, sort))


# alternatively,
A <- matrix(c(3,2,1,6,5,4), nrow = 2, byrow = TRUE)
#      [,1] [,2] [,3]
# [1,]    3    2    1
# [2,]    6    5    4

t(apply(A, 1, sort))
#      [,1] [,2] [,3]
# [1,]    1    2    3
# [2,]    4    5    6

## 7.27
# Use append function to place the vector c(-1,0,1) in the middle of the vector 1:10.
values <- 1:10
append(values, c(-1,0,1),  after=5)










